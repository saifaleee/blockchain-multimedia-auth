---
description: 
globs: 
alwaysApply: true
---
# .cursorrules - Configuration for the AI code editor

# This file tells the AI how to read and write code for this project.
# By defining the project structure and key libraries, we get more accurate and consistent AI assistance.

# General coding conventions
- Follow standard JavaScript/TypeScript and Solidity style guides.
- Use JSDoc for documenting functions in the backend and frontend.
- Use NatSpec for documenting Solidity smart contracts.

# Directory and File Structure
- `dapp/`: Contains the frontend React/Next.js application.
  - `dapp/src/components/`: Reusable UI components.
  - `dapp/src/lib/`: Web3 integration logic, hooks, and utility functions.
  - `dapp/src/pages/`: Application pages/routes.
- `backend/`: Contains the Node.js/Express server.
  - `backend/src/routes/`: API endpoint definitions.
  - `backend/src/controllers/`: Business logic for handling requests.
  - `backend/src/services/`: Logic for interacting with the blockchain and IPFS.
- `contracts/`: Contains the Solidity smart contracts.
- `scripts/`: Deployment and interaction scripts for smart contracts (using Hardhat/Truffle).
- `test/`: Test files for smart contracts and backend services.

# Frontend (dapp/)
- **Framework:** Use React.js with functional components and hooks. For new projects, prefer Next.js.
- **Styling:** Use Tailwind CSS for styling. If a component library is needed, use Material UI (MUI).
- **State Management:** Use React Context for simple state and consider Zustand or Redux for complex state.
- **Blockchain Interaction:** Use `ethers.js` for all interactions with the Ethereum blockchain. Use `Web3Modal` to handle wallet connections.
- **Key Libraries:** `react`, `next`, `ethers`, `tailwindcss`, `@mui/material`, `web3modal`.

# Backend (backend/)
- **Framework:** Use Node.js with Express.js.
- **Language:** Use TypeScript for better type safety.
- **Blockchain Interaction:** Use `ethers.js` to communicate with the smart contracts.
- **Storage Integration:** Use the `ipfs-http-client` or `arweave-js` SDKs to interact with decentralized storage.
- **Key Libraries:** `express`, `ethers`, `cors`, `dotenv`, `mongoose` (if using MongoDB), `pg` (if using PostgreSQL), `ipfs-http-client`.

# Smart Contracts (contracts/)
- **Language:** Solidity. Use the latest stable version of the compiler (e.g., 0.8.x).
- **Framework:** Use Hardhat as the development environment for compiling, testing, and deploying contracts.
- **Standards:** Use OpenZeppelin Contracts for standard, secure implementations of ERC-721/ERC-1155 and other utilities like `Ownable`.
- **Key Libraries:** `@openzeppelin/contracts`, `hardhat`.

# General Rule
- When generating new code, adhere to the file structure and library conventions defined above. For example, if asked to create a new API endpoint, create files in `backend/src/routes/` and `backend/src/controllers/`. If asked to create a new UI component, place it in `dapp/src/components/`.
